<!-- Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved. -->
<project>
    <shortName>DeadlineCloudForVREDSubmitter</shortName>
    <fullName>AWS Deadline Cloud for VRED Pro Submitter</fullName>
    <version>1.0</version>
    <vendor>Amazon Web Services, Inc.</vendor>
    <installerFilename>${product_shortname}-${platform_name}-installer.${platform_exec_suffix}</installerFilename>
    <enableRollback>1</enableRollback>
    <enableTimestamp>1</enableTimestamp>
    <allowComponentSelection>1</allowComponentSelection>

    <!-- Images and icons -->
    <logoImage>logoImage.png</logoImage>
    <leftImage>leftImage.png</leftImage>
    <splashImage>splashImage.png</splashImage>
    <windowsExecutableIcon>icon.ico</windowsExecutableIcon>
    <windowsUninstallerExecutableIcon>icon.ico</windowsUninstallerExecutableIcon>

    <!-- Allow Windows installer to run as regular user, since running as Admin is forced by default -->
    <requireInstallationByRootUser>0</requireInstallationByRootUser>
    <requestedExecutionLevel>asInvoker</requestedExecutionLevel>

    <functionDefinitionList>
        <actionDefinition name="fnAddPathEnvironmentVariable">
            <!-- Adds a PATH-like environment variable with options to add to the end or beginning of the PATH -->
            <parameterList>
                <stringParameter name="name"/>
                <stringParameter name="value"/>
                <stringParameter name="scope" default="user"/>
                <stringParameter name="insertAt" default="end">
                    <validationActionList>
                        <throwError>
                            <ruleList>
                                <regExMatch text="${insertAt}" logic="does_not_match" pattern="end|beginning"/>
                            </ruleList>
                        </throwError>
                    </validationActionList>
                </stringParameter>
            </parameterList>
            <actionList>
                <if>
                    <conditionRuleEvaluationLogic>or</conditionRuleEvaluationLogic>
                    <conditionRuleList>
                        <compareTextLength text="${env(${name})}"  logic="equals" length="0"/>
                        <!-- Don't update the env var if it already has the path -->
                        <regExMatch text="${env(${name})}" logic="matches" pattern="(?:[;:]|^)${value.escape_backslashes}(?:[;:]|$)"/>
                    </conditionRuleList>
                    <actionList>
                        <setInstallerVariable name="new_value" value="${value}"/>
                    </actionList>
                    <elseActionList>
                        <setInstallerVariable name="new_value" value="${value}${platform_env_path_sep}${env(${name})}">
                            <ruleList>
                                <compareText text="${insertAt}" logic="equals" value="beginning"/>
                            </ruleList>
                        </setInstallerVariable>
                        <setInstallerVariable name="new_value" value="${env(${name})}${platform_env_path_sep}${value}">
                            <ruleList>
                                <compareText text="${insertAt}" logic="equals" value="end"/>
                            </ruleList>
                        </setInstallerVariable>
                    </elseActionList>
                </if>
                <addEnvironmentVariable name="${name}" value="${new_value}" scope="${scope}"/>
            </actionList>
        </actionDefinition>
        <actionDefinition name="fnRemovePathFromEnvironmentVariable">
            <parameterList>
                <stringParameter name="name"/>
                <stringParameter name="value"/>
                <stringParameter name="scope" default="user"/>
            </parameterList>
            <actionList>
                <logMessage text="Comparing '${env(${name})}' and ${value}"/>
                <if>
                    <conditionRuleEvaluationLogic>and</conditionRuleEvaluationLogic>
                    <conditionRuleList>
                        <!-- <regExMatch text="${env(${name}).escape_backslashes}" logic="matches" pattern="(?:[;:]|^)${value.escape_backslashes}(?:[;:]|$)"/> -->
                        <compareText text="${env(${name})}" logic="equals" value="${value}"/>
                    </conditionRuleList>
                    <actionList>
                        <deleteEnvironmentVariable name="${name}" scope="${scope}"/>
                    </actionList>
                    <elseActionList>
                        <setInstallerVariableFromRegEx>
                            <name>new_value</name>
                            <pattern>(?:[;:]|^)${value.escape_backslashes}(?:[;:]|$)</pattern>
                            <substitution>${platform_env_path_sep}</substitution>
                            <text>${env(${name})}</text>
                        </setInstallerVariableFromRegEx>
                        <addEnvironmentVariable name="${name}" value="${new_value}" scope="${scope}"/>
                    </elseActionList>
                </if>
            </actionList>
        </actionDefinition>
    </functionDefinitionList>

    <componentList>
        <include>
            <file>../install_builder/deadline-cloud-for-vred.xml</file>
        </include>
    </componentList>

    <!-- Installer-wide parameters. These are displayed before component parameters -->
    <parameterList>
        <stringParameter name="installdirprefix" ask="0" cliOptionShow="0" allowEmptyValue="0" default="${user_home_directory}"/>
        <choiceParameter>
            <name>installscope</name>
            <title>Installation Scope</title>
            <description>Select the scope of the installation</description>
            <ask>yes</ask>
            <displayType>radiobuttons</displayType>
            <insertBefore>installdir</insertBefore>
            <default>user</default>
            <optionList>
                <option text="User (${system_username})" value="user"/>
                <option text="System (all users)" value="system">
                    <description>Requires administrative privileges</description>
                </option>
            </optionList>
            <validationActionList>
                <throwError text="The installer must be run as an administrator for a system-wide install.">
                    <ruleList>
                        <compareText logic="equals" text="${installscope}" value="system"/>
                        <isFalse value="${installer_is_root_install}"/>
                    </ruleList>
                </throwError>
            </validationActionList>
            <postShowPageActionList>
                <if>
                    <conditionRuleList>
                        <compareText logic="equals" text="${installscope}" value="user"/>
                    </conditionRuleList>
                    <actionList>
                        <setInstallerVariable name="installdirprefix" value="${user_home_directory}"/>
                    </actionList>
                    <elseActionList>
                        <setInstallerVariable name="installdirprefix" value="${platform_install_prefix}"/>
                    </elseActionList>
                </if>
            </postShowPageActionList>
        </choiceParameter>
        <directoryParameter>
            <name>installdir</name>
            <description>Installer.Parameter.installdir.description</description>
            <explanation>Installer.Parameter.installdir.explanation</explanation>
            <value></value>
            <default>${installdirprefix}/${product_shortname}</default>
            <allowEmptyValue>0</allowEmptyValue>
            <ask>yes</ask>
            <cliOptionName>prefix</cliOptionName>
            <mustBeWritable>yes</mustBeWritable>
            <mustExist>0</mustExist>
            <width>40</width>
        </directoryParameter>
    </parameterList>

    <preInitializationActionList>
        <setInstallerVariable name="platform_env_path_sep" value=";"/>
    </preInitializationActionList>
    <preInstallationActionList>
        <componentSelection>
            <select>deadline_cloud_for_vred</select>
        </componentSelection>
        <setInstallerVariable name="individual_install" value="1"/>
    </preInstallationActionList>
    <postInstallationActionList>
        <setInstallerVariable name="installscope" value="${installscope}" persist="1"/>
        <writeFile>
            <progressText>Writing version file</progressText>
            <path>${installdir}/installer_version.txt</path>
            <text>${project.version}</text>
        </writeFile>
        <changePermissions permissions="0644" files="${installdir}/installer_version.txt"/>
        <addFilesToUninstaller>
          <files>${vred_installdir}/</files>
        </addFilesToUninstaller>
        <fnAddPathEnvironmentVariable name="DC_VRED_MODULES" value="${installdir}" scope="${installscope}" insertAt="beginning"/>
    </postInstallationActionList>

    <preUninstallationActionList>
        <!-- Throw an error if this is was a system install (requires admin), otherwise the uninstaller does not actually delete the files -->
        <actionGroup>
            <actionList>
                <showWarning text="Cannot uninstall a system-wide installation as a non-administrator user. Please run the uninstaller as an administrator."/>
                <exit exitCode="1"/>
            </actionList>
            <ruleList>
                <compareText text="system" logic="equals" value="${installscope}"/>
                <isFalse value="${installer_is_root_install}"/>
            </ruleList>
        </actionGroup>
        <deleteFile path="${installdir}/installer_version.txt"/>
    </preUninstallationActionList>
    <postUninstallationActionList>
        <fnRemovePathFromEnvironmentVariable name="DC_VRED_MODULES" value="${installdir}" scope="${installscope}"/>
    </postUninstallationActionList>
    <width>550</width>
</project>
